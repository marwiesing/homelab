---
- name: Patch Kubernetes DaemonSet and Service
  hosts: control_plane
  gather_facts: yes
  tasks:

  - name: Patch DaemonSet
    ansible.builtin.command:
      cmd: >
        kubectl patch daemonset -n monitoring prometheus-prometheus-node-exporter --type='json' -p='[
          {"op": "replace", "path": "/spec/template/spec/containers/0/livenessProbe/httpGet/port", "value": 19100},
          {"op": "replace", "path": "/spec/template/spec/containers/0/readinessProbe/httpGet/port", "value": 19100},
          {"op": "replace", "path": "/spec/template/spec/containers/0/ports/0/containerPort", "value": 19100},
          {"op": "replace", "path": "/spec/template/spec/containers/0/ports/0/name", "value": "metrics-19100"}
        ]'
    register: daemonset_patch_result
    changed_when: "'patched' in daemonset_patch_result.stdout"

  - name: Restart DaemonSet Pods
    ansible.builtin.command:
      cmd: kubectl rollout restart daemonset -n monitoring prometheus-prometheus-node-exporter
    register: restart_result
    changed_when: "'restarted' in restart_result.stdout"

  - name: Patch Service
    ansible.builtin.command:
      cmd: >
        kubectl patch service -n monitoring prometheus-prometheus-node-exporter --type='json' -p='[
          {"op": "replace", "path": "/spec/ports/0/port", "value": 19100},
          {"op": "replace", "path": "/spec/ports/0/targetPort", "value": 19100}
        ]'
    register: service_patch_result
    changed_when: "'patched' in service_patch_result.stdout"

  - name: Wait for Pods to stabilize
    ansible.builtin.command: kubectl get pods -n monitoring
    register: pod_status
    changed_when: false

  - name: Identify CrashLoopBackOff Pods
    ansible.builtin.set_fact:
      failed_pods: "{{ pod_status.stdout_lines | select('search', 'CrashLoopBackOff') | map('split') | map(attribute=0) | list }}"

  - name: Identify Loki Promtail pods in CrashLoopBackOff or Unknown
    ansible.builtin.shell: |
      kubectl get pods -n monitoring --no-headers | grep loki-promtail | grep -E 'CrashLoopBackOff|Unknown' | awk '{print $1}'
    register: bad_promtail_pods
    changed_when: false

  - name: Force delete crashed Loki Promtail pods
    ansible.builtin.command: >
      kubectl delete pod -n monitoring {{ item }} --grace-period=0 --force
    loop: "{{ bad_promtail_pods.stdout_lines }}"
    when: bad_promtail_pods.stdout_lines | length > 0

  - name: Delete failed Pods
    ansible.builtin.command:
      cmd: kubectl delete pod -n monitoring {{ item }} --force --grace-period=0
    loop: "{{ failed_pods }}"
    when: failed_pods | length > 0

  - name: Ensure /run/promtail exists with correct permissions
    ansible.builtin.file:
      path: /run/promtail
      state: directory
      owner: root
      group: root
      mode: '0755'

  - name: Ensure /var/lib/docker/containers exists
    ansible.builtin.file:
      path: /var/lib/docker/containers
      state: directory
      mode: '0755'
    become: true

  - name: Ensure /var/log/pods exists
    ansible.builtin.file:
      path: /var/log/pods
      state: directory
      mode: '0755'
    become: true

  - name: Wait for Pods to be ready
    ansible.builtin.command: kubectl wait --for=condition=Ready pod --all -n monitoring --timeout=60s
    register: wait_result
    changed_when: false
    ignore_errors: yes

  - name: Check Endpoints
    ansible.builtin.command: kubectl get endpoints -n monitoring prometheus-prometheus-node-exporter
    register: endpoints_result
    changed_when: false

  - name: Get final list of Pods
    ansible.builtin.command: kubectl get pods -n monitoring -o wide
    register: pods_result
    changed_when: false

  - name: Display final results
    ansible.builtin.debug:
      msg:
      - "Endpoints:

        {{ endpoints_result.stdout }}"
      - "Pods:\n{{ pods_result.stdout }}"

  - name: Final report summary
    ansible.builtin.debug:
      msg: |
        ✅ Prometheus Node Exporter and Service patched successfully.
        ✅ DaemonSet restarted.
        ✅ Any failing pods (e.g. Grafana) were deleted and recreated.
        ✅ Endpoints now serve on port 19100:
          {{ endpoints_result.stdout }}
        ✅ Current Pod overview:
          {{ pods_result.stdout }}
